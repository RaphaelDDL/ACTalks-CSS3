Prerequisites
====================
Intermediary CSS

Basic Selectors
====================
#id
.class
element


Child Selectors
====================
>
The child selector is represented by the sign ">". It allows you to target elements that are direct children of a particular element.


Attribute Selectors
====================
Attribute selectors select an element using the presence of a given attribute or attribute value.

[attr]
Represents an element with an attribute name of attr.

[attr=value]
Represents an element with an attribute name of attr and whose value is exactly "value".

[attr~=value]
Represents an element with an attribute name of attr whose value is a whitespace-separated list of words, one of which is exactly "value".

[attr|=value]
Represents an element with an attribute name of attr. Its value can be exactly “value” or can begin with “value” immediately followed by “-” (U+002D). It can be used for language subcode matches.

[attr^=value]
Represents an element with an attribute name of attr and whose value is prefixed by "value".

[attr$=value]
Represents an element with an attribute name of attr and whose value is suffixed by "value".

[attr*=value]
Represents an element with an attribute name of attr and whose value contains at least one occurrence of string "value" as substring.



Simbling Selectors
====================
+ (adjacent)
This selector uses the plus sign, “+”, to combine two sequences of simple selectors. The elements in the selector have the same parent, and the second one must come immediately after the first.

~ (general)
The general sibling combinator works pretty much the same as the adjacent sibling combinator, but with the difference that the second selector doesn’t have to immediately follow the first one.

Pseudo-classes
====================
There are two types of dynamic pseudo-classes: link and user action ones. The link are :link and :visited, while the user action ones are :hover, :active and :focus.

The :link pseudo-class applies to links that haven’t been visited by the user, while the :visited pseudo-class applies to links that have been visited, so they are mutually exclusive.

The :hover pseudo-class applies when the user moves the cursor over the element, without having to activate or click on it. The :active pseudo-class applies when the user actually clicks on the element. And finally the :focus pseudo-class applies when that element is on focus — the most common application is on form elements.

:first-child
The :first-child pseudo-class allows you to target an element that is the first child of another element.

:last-child
The :last-child pseudo-class allows you to target an element that is the last child of another element.

Some HTML elements have an enable or disabled state (for example, input fields) and checked or unchecked states (radio buttons and checkboxes). These states can be targeted by the :enabled, :disabled or :checked pseudo-classes, respectively.


structural Pseudo-classes
====================
:nth-child() / :nth-last-child()
The :nth-child() pseudo-class allows you to target one or more specific children of a parent element.

:nth-of-type() / :nth-last-of-type()
:first-of-type / :last-of-type
:only-child
:only-of-type
:empty

negation Pseudo-class
====================
:not()

Pseudo-elements
====================
::first-line
::first-letter
::before
::after

New Properties
====================
vendor prefixes
resize
multiple bgs (multiple everything)
gradient
background-size
text-shadow
text-stroke
text-overflow
box-shadow
border-radius
opacity
transform
transition
@rules http://www.devlounge.net/code/demystifying-css-at-rules
animation / keyframes
box-sizing
flexbox http://css-tricks.com/snippets/css/a-guide-to-flexbox/


Selectors - Specificity
====================
Selectors have different 'ranks' in the CSS, so the latest selectors on the file will not always override the previous ones for the same elements.

So how do you calculate the specificity of a particular selector? Take into account that specificity will be represented as four numbers separated by commas, like:
1, 1, 1, 1 or 0, 2, 0, 1

(a) (b) (c) (d)

(a) is always zero, unless there is a style attribute applied to that element within the markup itself;

(b) is the sum of the number of IDs in that selector

(c) is the sum of other attribute selectors and pseudo-classes in that selector. Classes (.example) and attribute selectors (eg. li[id=red]) are included here.

(d) counts the elements (like table, p, div, etc.) and pseudo-elements (like :first-line)

The universal selector (*) has a specificity of zero

If two selectors have the same specificity, the one that comes last on the stylesheet will be applied

Let’s take a look at a few examples, to make it easier to understand:

#sidebar h2 — 0, 1, 0, 1
h2.title — 0, 0, 1, 1
h2 + p — 0, 0, 0, 2
#sidebar p:first-line — 0, 1, 0, 2

From the following selectors, the first one is the one who will be applied to the element, because it has the higher specificity:
#sidebar p#first { color: red; } — 0, 2, 0, 1
#sidebar p:first-line { color: blue; } — 0, 1, 0, 2




http://css3generator.com/
http://www.colorzilla.com/gradient-editor/
http://coding.smashingmagazine.com/2009/08/17/taming-advanced-css-selectors/
https://developer.mozilla.org/en-US/docs/Web/CSS/transition
https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_animations